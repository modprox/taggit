package publish

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ModFinderMock implements ModFinder
type ModFinderMock struct {
	t minimock.Tester

	funcFindModule          func(root string) (s1 string, err error)
	inspectFuncFindModule   func(root string)
	afterFindModuleCounter  uint64
	beforeFindModuleCounter uint64
	FindModuleMock          mModFinderMockFindModule
}

// NewModFinderMock returns a mock for ModFinder
func NewModFinderMock(t minimock.Tester) *ModFinderMock {
	m := &ModFinderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindModuleMock = mModFinderMockFindModule{mock: m}
	m.FindModuleMock.callArgs = []*ModFinderMockFindModuleParams{}

	return m
}

type mModFinderMockFindModule struct {
	mock               *ModFinderMock
	defaultExpectation *ModFinderMockFindModuleExpectation
	expectations       []*ModFinderMockFindModuleExpectation

	callArgs []*ModFinderMockFindModuleParams
	mutex    sync.RWMutex
}

// ModFinderMockFindModuleExpectation specifies expectation struct of the ModFinder.FindModule
type ModFinderMockFindModuleExpectation struct {
	mock    *ModFinderMock
	params  *ModFinderMockFindModuleParams
	results *ModFinderMockFindModuleResults
	Counter uint64
}

// ModFinderMockFindModuleParams contains parameters of the ModFinder.FindModule
type ModFinderMockFindModuleParams struct {
	root string
}

// ModFinderMockFindModuleResults contains results of the ModFinder.FindModule
type ModFinderMockFindModuleResults struct {
	s1  string
	err error
}

// Expect sets up expected params for ModFinder.FindModule
func (mmFindModule *mModFinderMockFindModule) Expect(root string) *mModFinderMockFindModule {
	if mmFindModule.mock.funcFindModule != nil {
		mmFindModule.mock.t.Fatalf("ModFinderMock.FindModule mock is already set by Set")
	}

	if mmFindModule.defaultExpectation == nil {
		mmFindModule.defaultExpectation = &ModFinderMockFindModuleExpectation{}
	}

	mmFindModule.defaultExpectation.params = &ModFinderMockFindModuleParams{root}
	for _, e := range mmFindModule.expectations {
		if minimock.Equal(e.params, mmFindModule.defaultExpectation.params) {
			mmFindModule.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindModule.defaultExpectation.params)
		}
	}

	return mmFindModule
}

// Inspect accepts an inspector function that has same arguments as the ModFinder.FindModule
func (mmFindModule *mModFinderMockFindModule) Inspect(f func(root string)) *mModFinderMockFindModule {
	if mmFindModule.mock.inspectFuncFindModule != nil {
		mmFindModule.mock.t.Fatalf("Inspect function is already set for ModFinderMock.FindModule")
	}

	mmFindModule.mock.inspectFuncFindModule = f

	return mmFindModule
}

// Return sets up results that will be returned by ModFinder.FindModule
func (mmFindModule *mModFinderMockFindModule) Return(s1 string, err error) *ModFinderMock {
	if mmFindModule.mock.funcFindModule != nil {
		mmFindModule.mock.t.Fatalf("ModFinderMock.FindModule mock is already set by Set")
	}

	if mmFindModule.defaultExpectation == nil {
		mmFindModule.defaultExpectation = &ModFinderMockFindModuleExpectation{mock: mmFindModule.mock}
	}
	mmFindModule.defaultExpectation.results = &ModFinderMockFindModuleResults{s1, err}
	return mmFindModule.mock
}

//Set uses given function f to mock the ModFinder.FindModule method
func (mmFindModule *mModFinderMockFindModule) Set(f func(root string) (s1 string, err error)) *ModFinderMock {
	if mmFindModule.defaultExpectation != nil {
		mmFindModule.mock.t.Fatalf("Default expectation is already set for the ModFinder.FindModule method")
	}

	if len(mmFindModule.expectations) > 0 {
		mmFindModule.mock.t.Fatalf("Some expectations are already set for the ModFinder.FindModule method")
	}

	mmFindModule.mock.funcFindModule = f
	return mmFindModule.mock
}

// When sets expectation for the ModFinder.FindModule which will trigger the result defined by the following
// Then helper
func (mmFindModule *mModFinderMockFindModule) When(root string) *ModFinderMockFindModuleExpectation {
	if mmFindModule.mock.funcFindModule != nil {
		mmFindModule.mock.t.Fatalf("ModFinderMock.FindModule mock is already set by Set")
	}

	expectation := &ModFinderMockFindModuleExpectation{
		mock:   mmFindModule.mock,
		params: &ModFinderMockFindModuleParams{root},
	}
	mmFindModule.expectations = append(mmFindModule.expectations, expectation)
	return expectation
}

// Then sets up ModFinder.FindModule return parameters for the expectation previously defined by the When method
func (e *ModFinderMockFindModuleExpectation) Then(s1 string, err error) *ModFinderMock {
	e.results = &ModFinderMockFindModuleResults{s1, err}
	return e.mock
}

// FindModule implements ModFinder
func (mmFindModule *ModFinderMock) FindModule(root string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmFindModule.beforeFindModuleCounter, 1)
	defer mm_atomic.AddUint64(&mmFindModule.afterFindModuleCounter, 1)

	if mmFindModule.inspectFuncFindModule != nil {
		mmFindModule.inspectFuncFindModule(root)
	}

	mm_params := &ModFinderMockFindModuleParams{root}

	// Record call args
	mmFindModule.FindModuleMock.mutex.Lock()
	mmFindModule.FindModuleMock.callArgs = append(mmFindModule.FindModuleMock.callArgs, mm_params)
	mmFindModule.FindModuleMock.mutex.Unlock()

	for _, e := range mmFindModule.FindModuleMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmFindModule.FindModuleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindModule.FindModuleMock.defaultExpectation.Counter, 1)
		mm_want := mmFindModule.FindModuleMock.defaultExpectation.params
		mm_got := ModFinderMockFindModuleParams{root}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindModule.t.Errorf("ModFinderMock.FindModule got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindModule.FindModuleMock.defaultExpectation.results
		if mm_results == nil {
			mmFindModule.t.Fatal("No results are set for the ModFinderMock.FindModule")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmFindModule.funcFindModule != nil {
		return mmFindModule.funcFindModule(root)
	}
	mmFindModule.t.Fatalf("Unexpected call to ModFinderMock.FindModule. %v", root)
	return
}

// FindModuleAfterCounter returns a count of finished ModFinderMock.FindModule invocations
func (mmFindModule *ModFinderMock) FindModuleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindModule.afterFindModuleCounter)
}

// FindModuleBeforeCounter returns a count of ModFinderMock.FindModule invocations
func (mmFindModule *ModFinderMock) FindModuleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindModule.beforeFindModuleCounter)
}

// Calls returns a list of arguments used in each call to ModFinderMock.FindModule.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindModule *mModFinderMockFindModule) Calls() []*ModFinderMockFindModuleParams {
	mmFindModule.mutex.RLock()

	argCopy := make([]*ModFinderMockFindModuleParams, len(mmFindModule.callArgs))
	copy(argCopy, mmFindModule.callArgs)

	mmFindModule.mutex.RUnlock()

	return argCopy
}

// MinimockFindModuleDone returns true if the count of the FindModule invocations corresponds
// the number of defined expectations
func (m *ModFinderMock) MinimockFindModuleDone() bool {
	for _, e := range m.FindModuleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindModuleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindModuleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindModule != nil && mm_atomic.LoadUint64(&m.afterFindModuleCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindModuleInspect logs each unmet expectation
func (m *ModFinderMock) MinimockFindModuleInspect() {
	for _, e := range m.FindModuleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ModFinderMock.FindModule with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindModuleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindModuleCounter) < 1 {
		if m.FindModuleMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ModFinderMock.FindModule")
		} else {
			m.t.Errorf("Expected call to ModFinderMock.FindModule with params: %#v", *m.FindModuleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindModule != nil && mm_atomic.LoadUint64(&m.afterFindModuleCounter) < 1 {
		m.t.Error("Expected call to ModFinderMock.FindModule")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ModFinderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFindModuleInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ModFinderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ModFinderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindModuleDone()
}
