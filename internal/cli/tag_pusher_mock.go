package cli

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gophers.dev/pkgs/semantic"
)

// TagPusherMock implements TagPusher
type TagPusherMock struct {
	t minimock.Tester

	funcPushTag          func(t1 semantic.Tag) (err error)
	inspectFuncPushTag   func(t1 semantic.Tag)
	afterPushTagCounter  uint64
	beforePushTagCounter uint64
	PushTagMock          mTagPusherMockPushTag
}

// NewTagPusherMock returns a mock for TagPusher
func NewTagPusherMock(t minimock.Tester) *TagPusherMock {
	m := &TagPusherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PushTagMock = mTagPusherMockPushTag{mock: m}
	m.PushTagMock.callArgs = []*TagPusherMockPushTagParams{}

	return m
}

type mTagPusherMockPushTag struct {
	mock               *TagPusherMock
	defaultExpectation *TagPusherMockPushTagExpectation
	expectations       []*TagPusherMockPushTagExpectation

	callArgs []*TagPusherMockPushTagParams
	mutex    sync.RWMutex
}

// TagPusherMockPushTagExpectation specifies expectation struct of the TagPusher.PushTag
type TagPusherMockPushTagExpectation struct {
	mock    *TagPusherMock
	params  *TagPusherMockPushTagParams
	results *TagPusherMockPushTagResults
	Counter uint64
}

// TagPusherMockPushTagParams contains parameters of the TagPusher.PushTag
type TagPusherMockPushTagParams struct {
	t1 semantic.Tag
}

// TagPusherMockPushTagResults contains results of the TagPusher.PushTag
type TagPusherMockPushTagResults struct {
	err error
}

// Expect sets up expected params for TagPusher.PushTag
func (mmPushTag *mTagPusherMockPushTag) Expect(t1 semantic.Tag) *mTagPusherMockPushTag {
	if mmPushTag.mock.funcPushTag != nil {
		mmPushTag.mock.t.Fatalf("TagPusherMock.PushTag mock is already set by Set")
	}

	if mmPushTag.defaultExpectation == nil {
		mmPushTag.defaultExpectation = &TagPusherMockPushTagExpectation{}
	}

	mmPushTag.defaultExpectation.params = &TagPusherMockPushTagParams{t1}
	for _, e := range mmPushTag.expectations {
		if minimock.Equal(e.params, mmPushTag.defaultExpectation.params) {
			mmPushTag.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPushTag.defaultExpectation.params)
		}
	}

	return mmPushTag
}

// Inspect accepts an inspector function that has same arguments as the TagPusher.PushTag
func (mmPushTag *mTagPusherMockPushTag) Inspect(f func(t1 semantic.Tag)) *mTagPusherMockPushTag {
	if mmPushTag.mock.inspectFuncPushTag != nil {
		mmPushTag.mock.t.Fatalf("Inspect function is already set for TagPusherMock.PushTag")
	}

	mmPushTag.mock.inspectFuncPushTag = f

	return mmPushTag
}

// Return sets up results that will be returned by TagPusher.PushTag
func (mmPushTag *mTagPusherMockPushTag) Return(err error) *TagPusherMock {
	if mmPushTag.mock.funcPushTag != nil {
		mmPushTag.mock.t.Fatalf("TagPusherMock.PushTag mock is already set by Set")
	}

	if mmPushTag.defaultExpectation == nil {
		mmPushTag.defaultExpectation = &TagPusherMockPushTagExpectation{mock: mmPushTag.mock}
	}
	mmPushTag.defaultExpectation.results = &TagPusherMockPushTagResults{err}
	return mmPushTag.mock
}

//Set uses given function f to mock the TagPusher.PushTag method
func (mmPushTag *mTagPusherMockPushTag) Set(f func(t1 semantic.Tag) (err error)) *TagPusherMock {
	if mmPushTag.defaultExpectation != nil {
		mmPushTag.mock.t.Fatalf("Default expectation is already set for the TagPusher.PushTag method")
	}

	if len(mmPushTag.expectations) > 0 {
		mmPushTag.mock.t.Fatalf("Some expectations are already set for the TagPusher.PushTag method")
	}

	mmPushTag.mock.funcPushTag = f
	return mmPushTag.mock
}

// When sets expectation for the TagPusher.PushTag which will trigger the result defined by the following
// Then helper
func (mmPushTag *mTagPusherMockPushTag) When(t1 semantic.Tag) *TagPusherMockPushTagExpectation {
	if mmPushTag.mock.funcPushTag != nil {
		mmPushTag.mock.t.Fatalf("TagPusherMock.PushTag mock is already set by Set")
	}

	expectation := &TagPusherMockPushTagExpectation{
		mock:   mmPushTag.mock,
		params: &TagPusherMockPushTagParams{t1},
	}
	mmPushTag.expectations = append(mmPushTag.expectations, expectation)
	return expectation
}

// Then sets up TagPusher.PushTag return parameters for the expectation previously defined by the When method
func (e *TagPusherMockPushTagExpectation) Then(err error) *TagPusherMock {
	e.results = &TagPusherMockPushTagResults{err}
	return e.mock
}

// PushTag implements TagPusher
func (mmPushTag *TagPusherMock) PushTag(t1 semantic.Tag) (err error) {
	mm_atomic.AddUint64(&mmPushTag.beforePushTagCounter, 1)
	defer mm_atomic.AddUint64(&mmPushTag.afterPushTagCounter, 1)

	if mmPushTag.inspectFuncPushTag != nil {
		mmPushTag.inspectFuncPushTag(t1)
	}

	mm_params := &TagPusherMockPushTagParams{t1}

	// Record call args
	mmPushTag.PushTagMock.mutex.Lock()
	mmPushTag.PushTagMock.callArgs = append(mmPushTag.PushTagMock.callArgs, mm_params)
	mmPushTag.PushTagMock.mutex.Unlock()

	for _, e := range mmPushTag.PushTagMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPushTag.PushTagMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPushTag.PushTagMock.defaultExpectation.Counter, 1)
		mm_want := mmPushTag.PushTagMock.defaultExpectation.params
		mm_got := TagPusherMockPushTagParams{t1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPushTag.t.Errorf("TagPusherMock.PushTag got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPushTag.PushTagMock.defaultExpectation.results
		if mm_results == nil {
			mmPushTag.t.Fatal("No results are set for the TagPusherMock.PushTag")
		}
		return (*mm_results).err
	}
	if mmPushTag.funcPushTag != nil {
		return mmPushTag.funcPushTag(t1)
	}
	mmPushTag.t.Fatalf("Unexpected call to TagPusherMock.PushTag. %v", t1)
	return
}

// PushTagAfterCounter returns a count of finished TagPusherMock.PushTag invocations
func (mmPushTag *TagPusherMock) PushTagAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPushTag.afterPushTagCounter)
}

// PushTagBeforeCounter returns a count of TagPusherMock.PushTag invocations
func (mmPushTag *TagPusherMock) PushTagBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPushTag.beforePushTagCounter)
}

// Calls returns a list of arguments used in each call to TagPusherMock.PushTag.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPushTag *mTagPusherMockPushTag) Calls() []*TagPusherMockPushTagParams {
	mmPushTag.mutex.RLock()

	argCopy := make([]*TagPusherMockPushTagParams, len(mmPushTag.callArgs))
	copy(argCopy, mmPushTag.callArgs)

	mmPushTag.mutex.RUnlock()

	return argCopy
}

// MinimockPushTagDone returns true if the count of the PushTag invocations corresponds
// the number of defined expectations
func (m *TagPusherMock) MinimockPushTagDone() bool {
	for _, e := range m.PushTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PushTagMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPushTagCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPushTag != nil && mm_atomic.LoadUint64(&m.afterPushTagCounter) < 1 {
		return false
	}
	return true
}

// MinimockPushTagInspect logs each unmet expectation
func (m *TagPusherMock) MinimockPushTagInspect() {
	for _, e := range m.PushTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TagPusherMock.PushTag with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PushTagMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPushTagCounter) < 1 {
		if m.PushTagMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TagPusherMock.PushTag")
		} else {
			m.t.Errorf("Expected call to TagPusherMock.PushTag with params: %#v", *m.PushTagMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPushTag != nil && mm_atomic.LoadUint64(&m.afterPushTagCounter) < 1 {
		m.t.Error("Expected call to TagPusherMock.PushTag")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TagPusherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPushTagInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TagPusherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TagPusherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPushTagDone()
}
