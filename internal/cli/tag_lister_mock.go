package cli

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"oss.indeed.com/go/taggit/internal/tags"
)

// TagListerMock implements TagLister
type TagListerMock struct {
	t minimock.Tester

	funcListBranchTags          func() (t1 tags.Taxonomy, err error)
	inspectFuncListBranchTags   func()
	afterListBranchTagsCounter  uint64
	beforeListBranchTagsCounter uint64
	ListBranchTagsMock          mTagListerMockListBranchTags

	funcListRepoTags          func() (t1 tags.Taxonomy, err error)
	inspectFuncListRepoTags   func()
	afterListRepoTagsCounter  uint64
	beforeListRepoTagsCounter uint64
	ListRepoTagsMock          mTagListerMockListRepoTags
}

// NewTagListerMock returns a mock for TagLister
func NewTagListerMock(t minimock.Tester) *TagListerMock {
	m := &TagListerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ListBranchTagsMock = mTagListerMockListBranchTags{mock: m}

	m.ListRepoTagsMock = mTagListerMockListRepoTags{mock: m}

	return m
}

type mTagListerMockListBranchTags struct {
	mock               *TagListerMock
	defaultExpectation *TagListerMockListBranchTagsExpectation
	expectations       []*TagListerMockListBranchTagsExpectation
}

// TagListerMockListBranchTagsExpectation specifies expectation struct of the TagLister.ListBranchTags
type TagListerMockListBranchTagsExpectation struct {
	mock *TagListerMock

	results *TagListerMockListBranchTagsResults
	Counter uint64
}

// TagListerMockListBranchTagsResults contains results of the TagLister.ListBranchTags
type TagListerMockListBranchTagsResults struct {
	t1  tags.Taxonomy
	err error
}

// Expect sets up expected params for TagLister.ListBranchTags
func (mmListBranchTags *mTagListerMockListBranchTags) Expect() *mTagListerMockListBranchTags {
	if mmListBranchTags.mock.funcListBranchTags != nil {
		mmListBranchTags.mock.t.Fatalf("TagListerMock.ListBranchTags mock is already set by Set")
	}

	if mmListBranchTags.defaultExpectation == nil {
		mmListBranchTags.defaultExpectation = &TagListerMockListBranchTagsExpectation{}
	}

	return mmListBranchTags
}

// Inspect accepts an inspector function that has same arguments as the TagLister.ListBranchTags
func (mmListBranchTags *mTagListerMockListBranchTags) Inspect(f func()) *mTagListerMockListBranchTags {
	if mmListBranchTags.mock.inspectFuncListBranchTags != nil {
		mmListBranchTags.mock.t.Fatalf("Inspect function is already set for TagListerMock.ListBranchTags")
	}

	mmListBranchTags.mock.inspectFuncListBranchTags = f

	return mmListBranchTags
}

// Return sets up results that will be returned by TagLister.ListBranchTags
func (mmListBranchTags *mTagListerMockListBranchTags) Return(t1 tags.Taxonomy, err error) *TagListerMock {
	if mmListBranchTags.mock.funcListBranchTags != nil {
		mmListBranchTags.mock.t.Fatalf("TagListerMock.ListBranchTags mock is already set by Set")
	}

	if mmListBranchTags.defaultExpectation == nil {
		mmListBranchTags.defaultExpectation = &TagListerMockListBranchTagsExpectation{mock: mmListBranchTags.mock}
	}
	mmListBranchTags.defaultExpectation.results = &TagListerMockListBranchTagsResults{t1, err}
	return mmListBranchTags.mock
}

//Set uses given function f to mock the TagLister.ListBranchTags method
func (mmListBranchTags *mTagListerMockListBranchTags) Set(f func() (t1 tags.Taxonomy, err error)) *TagListerMock {
	if mmListBranchTags.defaultExpectation != nil {
		mmListBranchTags.mock.t.Fatalf("Default expectation is already set for the TagLister.ListBranchTags method")
	}

	if len(mmListBranchTags.expectations) > 0 {
		mmListBranchTags.mock.t.Fatalf("Some expectations are already set for the TagLister.ListBranchTags method")
	}

	mmListBranchTags.mock.funcListBranchTags = f
	return mmListBranchTags.mock
}

// ListBranchTags implements TagLister
func (mmListBranchTags *TagListerMock) ListBranchTags() (t1 tags.Taxonomy, err error) {
	mm_atomic.AddUint64(&mmListBranchTags.beforeListBranchTagsCounter, 1)
	defer mm_atomic.AddUint64(&mmListBranchTags.afterListBranchTagsCounter, 1)

	if mmListBranchTags.inspectFuncListBranchTags != nil {
		mmListBranchTags.inspectFuncListBranchTags()
	}

	if mmListBranchTags.ListBranchTagsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListBranchTags.ListBranchTagsMock.defaultExpectation.Counter, 1)

		mm_results := mmListBranchTags.ListBranchTagsMock.defaultExpectation.results
		if mm_results == nil {
			mmListBranchTags.t.Fatal("No results are set for the TagListerMock.ListBranchTags")
		}
		return (*mm_results).t1, (*mm_results).err
	}
	if mmListBranchTags.funcListBranchTags != nil {
		return mmListBranchTags.funcListBranchTags()
	}
	mmListBranchTags.t.Fatalf("Unexpected call to TagListerMock.ListBranchTags.")
	return
}

// ListBranchTagsAfterCounter returns a count of finished TagListerMock.ListBranchTags invocations
func (mmListBranchTags *TagListerMock) ListBranchTagsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListBranchTags.afterListBranchTagsCounter)
}

// ListBranchTagsBeforeCounter returns a count of TagListerMock.ListBranchTags invocations
func (mmListBranchTags *TagListerMock) ListBranchTagsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListBranchTags.beforeListBranchTagsCounter)
}

// MinimockListBranchTagsDone returns true if the count of the ListBranchTags invocations corresponds
// the number of defined expectations
func (m *TagListerMock) MinimockListBranchTagsDone() bool {
	for _, e := range m.ListBranchTagsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListBranchTagsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListBranchTagsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListBranchTags != nil && mm_atomic.LoadUint64(&m.afterListBranchTagsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListBranchTagsInspect logs each unmet expectation
func (m *TagListerMock) MinimockListBranchTagsInspect() {
	for _, e := range m.ListBranchTagsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TagListerMock.ListBranchTags")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListBranchTagsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListBranchTagsCounter) < 1 {
		m.t.Error("Expected call to TagListerMock.ListBranchTags")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListBranchTags != nil && mm_atomic.LoadUint64(&m.afterListBranchTagsCounter) < 1 {
		m.t.Error("Expected call to TagListerMock.ListBranchTags")
	}
}

type mTagListerMockListRepoTags struct {
	mock               *TagListerMock
	defaultExpectation *TagListerMockListRepoTagsExpectation
	expectations       []*TagListerMockListRepoTagsExpectation
}

// TagListerMockListRepoTagsExpectation specifies expectation struct of the TagLister.ListRepoTags
type TagListerMockListRepoTagsExpectation struct {
	mock *TagListerMock

	results *TagListerMockListRepoTagsResults
	Counter uint64
}

// TagListerMockListRepoTagsResults contains results of the TagLister.ListRepoTags
type TagListerMockListRepoTagsResults struct {
	t1  tags.Taxonomy
	err error
}

// Expect sets up expected params for TagLister.ListRepoTags
func (mmListRepoTags *mTagListerMockListRepoTags) Expect() *mTagListerMockListRepoTags {
	if mmListRepoTags.mock.funcListRepoTags != nil {
		mmListRepoTags.mock.t.Fatalf("TagListerMock.ListRepoTags mock is already set by Set")
	}

	if mmListRepoTags.defaultExpectation == nil {
		mmListRepoTags.defaultExpectation = &TagListerMockListRepoTagsExpectation{}
	}

	return mmListRepoTags
}

// Inspect accepts an inspector function that has same arguments as the TagLister.ListRepoTags
func (mmListRepoTags *mTagListerMockListRepoTags) Inspect(f func()) *mTagListerMockListRepoTags {
	if mmListRepoTags.mock.inspectFuncListRepoTags != nil {
		mmListRepoTags.mock.t.Fatalf("Inspect function is already set for TagListerMock.ListRepoTags")
	}

	mmListRepoTags.mock.inspectFuncListRepoTags = f

	return mmListRepoTags
}

// Return sets up results that will be returned by TagLister.ListRepoTags
func (mmListRepoTags *mTagListerMockListRepoTags) Return(t1 tags.Taxonomy, err error) *TagListerMock {
	if mmListRepoTags.mock.funcListRepoTags != nil {
		mmListRepoTags.mock.t.Fatalf("TagListerMock.ListRepoTags mock is already set by Set")
	}

	if mmListRepoTags.defaultExpectation == nil {
		mmListRepoTags.defaultExpectation = &TagListerMockListRepoTagsExpectation{mock: mmListRepoTags.mock}
	}
	mmListRepoTags.defaultExpectation.results = &TagListerMockListRepoTagsResults{t1, err}
	return mmListRepoTags.mock
}

//Set uses given function f to mock the TagLister.ListRepoTags method
func (mmListRepoTags *mTagListerMockListRepoTags) Set(f func() (t1 tags.Taxonomy, err error)) *TagListerMock {
	if mmListRepoTags.defaultExpectation != nil {
		mmListRepoTags.mock.t.Fatalf("Default expectation is already set for the TagLister.ListRepoTags method")
	}

	if len(mmListRepoTags.expectations) > 0 {
		mmListRepoTags.mock.t.Fatalf("Some expectations are already set for the TagLister.ListRepoTags method")
	}

	mmListRepoTags.mock.funcListRepoTags = f
	return mmListRepoTags.mock
}

// ListRepoTags implements TagLister
func (mmListRepoTags *TagListerMock) ListRepoTags() (t1 tags.Taxonomy, err error) {
	mm_atomic.AddUint64(&mmListRepoTags.beforeListRepoTagsCounter, 1)
	defer mm_atomic.AddUint64(&mmListRepoTags.afterListRepoTagsCounter, 1)

	if mmListRepoTags.inspectFuncListRepoTags != nil {
		mmListRepoTags.inspectFuncListRepoTags()
	}

	if mmListRepoTags.ListRepoTagsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListRepoTags.ListRepoTagsMock.defaultExpectation.Counter, 1)

		mm_results := mmListRepoTags.ListRepoTagsMock.defaultExpectation.results
		if mm_results == nil {
			mmListRepoTags.t.Fatal("No results are set for the TagListerMock.ListRepoTags")
		}
		return (*mm_results).t1, (*mm_results).err
	}
	if mmListRepoTags.funcListRepoTags != nil {
		return mmListRepoTags.funcListRepoTags()
	}
	mmListRepoTags.t.Fatalf("Unexpected call to TagListerMock.ListRepoTags.")
	return
}

// ListRepoTagsAfterCounter returns a count of finished TagListerMock.ListRepoTags invocations
func (mmListRepoTags *TagListerMock) ListRepoTagsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRepoTags.afterListRepoTagsCounter)
}

// ListRepoTagsBeforeCounter returns a count of TagListerMock.ListRepoTags invocations
func (mmListRepoTags *TagListerMock) ListRepoTagsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRepoTags.beforeListRepoTagsCounter)
}

// MinimockListRepoTagsDone returns true if the count of the ListRepoTags invocations corresponds
// the number of defined expectations
func (m *TagListerMock) MinimockListRepoTagsDone() bool {
	for _, e := range m.ListRepoTagsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListRepoTagsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListRepoTagsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListRepoTags != nil && mm_atomic.LoadUint64(&m.afterListRepoTagsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListRepoTagsInspect logs each unmet expectation
func (m *TagListerMock) MinimockListRepoTagsInspect() {
	for _, e := range m.ListRepoTagsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TagListerMock.ListRepoTags")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListRepoTagsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListRepoTagsCounter) < 1 {
		m.t.Error("Expected call to TagListerMock.ListRepoTags")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListRepoTags != nil && mm_atomic.LoadUint64(&m.afterListRepoTagsCounter) < 1 {
		m.t.Error("Expected call to TagListerMock.ListRepoTags")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TagListerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockListBranchTagsInspect()

		m.MinimockListRepoTagsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TagListerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TagListerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockListBranchTagsDone() &&
		m.MinimockListRepoTagsDone()
}
