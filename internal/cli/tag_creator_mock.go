package cli

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gophers.dev/pkgs/semantic"
)

// TagCreatorMock implements TagCreator
type TagCreatorMock struct {
	t minimock.Tester

	funcCreateTag          func(t1 semantic.Tag) (err error)
	inspectFuncCreateTag   func(t1 semantic.Tag)
	afterCreateTagCounter  uint64
	beforeCreateTagCounter uint64
	CreateTagMock          mTagCreatorMockCreateTag
}

// NewTagCreatorMock returns a mock for TagCreator
func NewTagCreatorMock(t minimock.Tester) *TagCreatorMock {
	m := &TagCreatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateTagMock = mTagCreatorMockCreateTag{mock: m}
	m.CreateTagMock.callArgs = []*TagCreatorMockCreateTagParams{}

	return m
}

type mTagCreatorMockCreateTag struct {
	mock               *TagCreatorMock
	defaultExpectation *TagCreatorMockCreateTagExpectation
	expectations       []*TagCreatorMockCreateTagExpectation

	callArgs []*TagCreatorMockCreateTagParams
	mutex    sync.RWMutex
}

// TagCreatorMockCreateTagExpectation specifies expectation struct of the TagCreator.CreateTag
type TagCreatorMockCreateTagExpectation struct {
	mock    *TagCreatorMock
	params  *TagCreatorMockCreateTagParams
	results *TagCreatorMockCreateTagResults
	Counter uint64
}

// TagCreatorMockCreateTagParams contains parameters of the TagCreator.CreateTag
type TagCreatorMockCreateTagParams struct {
	t1 semantic.Tag
}

// TagCreatorMockCreateTagResults contains results of the TagCreator.CreateTag
type TagCreatorMockCreateTagResults struct {
	err error
}

// Expect sets up expected params for TagCreator.CreateTag
func (mmCreateTag *mTagCreatorMockCreateTag) Expect(t1 semantic.Tag) *mTagCreatorMockCreateTag {
	if mmCreateTag.mock.funcCreateTag != nil {
		mmCreateTag.mock.t.Fatalf("TagCreatorMock.CreateTag mock is already set by Set")
	}

	if mmCreateTag.defaultExpectation == nil {
		mmCreateTag.defaultExpectation = &TagCreatorMockCreateTagExpectation{}
	}

	mmCreateTag.defaultExpectation.params = &TagCreatorMockCreateTagParams{t1}
	for _, e := range mmCreateTag.expectations {
		if minimock.Equal(e.params, mmCreateTag.defaultExpectation.params) {
			mmCreateTag.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateTag.defaultExpectation.params)
		}
	}

	return mmCreateTag
}

// Inspect accepts an inspector function that has same arguments as the TagCreator.CreateTag
func (mmCreateTag *mTagCreatorMockCreateTag) Inspect(f func(t1 semantic.Tag)) *mTagCreatorMockCreateTag {
	if mmCreateTag.mock.inspectFuncCreateTag != nil {
		mmCreateTag.mock.t.Fatalf("Inspect function is already set for TagCreatorMock.CreateTag")
	}

	mmCreateTag.mock.inspectFuncCreateTag = f

	return mmCreateTag
}

// Return sets up results that will be returned by TagCreator.CreateTag
func (mmCreateTag *mTagCreatorMockCreateTag) Return(err error) *TagCreatorMock {
	if mmCreateTag.mock.funcCreateTag != nil {
		mmCreateTag.mock.t.Fatalf("TagCreatorMock.CreateTag mock is already set by Set")
	}

	if mmCreateTag.defaultExpectation == nil {
		mmCreateTag.defaultExpectation = &TagCreatorMockCreateTagExpectation{mock: mmCreateTag.mock}
	}
	mmCreateTag.defaultExpectation.results = &TagCreatorMockCreateTagResults{err}
	return mmCreateTag.mock
}

//Set uses given function f to mock the TagCreator.CreateTag method
func (mmCreateTag *mTagCreatorMockCreateTag) Set(f func(t1 semantic.Tag) (err error)) *TagCreatorMock {
	if mmCreateTag.defaultExpectation != nil {
		mmCreateTag.mock.t.Fatalf("Default expectation is already set for the TagCreator.CreateTag method")
	}

	if len(mmCreateTag.expectations) > 0 {
		mmCreateTag.mock.t.Fatalf("Some expectations are already set for the TagCreator.CreateTag method")
	}

	mmCreateTag.mock.funcCreateTag = f
	return mmCreateTag.mock
}

// When sets expectation for the TagCreator.CreateTag which will trigger the result defined by the following
// Then helper
func (mmCreateTag *mTagCreatorMockCreateTag) When(t1 semantic.Tag) *TagCreatorMockCreateTagExpectation {
	if mmCreateTag.mock.funcCreateTag != nil {
		mmCreateTag.mock.t.Fatalf("TagCreatorMock.CreateTag mock is already set by Set")
	}

	expectation := &TagCreatorMockCreateTagExpectation{
		mock:   mmCreateTag.mock,
		params: &TagCreatorMockCreateTagParams{t1},
	}
	mmCreateTag.expectations = append(mmCreateTag.expectations, expectation)
	return expectation
}

// Then sets up TagCreator.CreateTag return parameters for the expectation previously defined by the When method
func (e *TagCreatorMockCreateTagExpectation) Then(err error) *TagCreatorMock {
	e.results = &TagCreatorMockCreateTagResults{err}
	return e.mock
}

// CreateTag implements TagCreator
func (mmCreateTag *TagCreatorMock) CreateTag(t1 semantic.Tag) (err error) {
	mm_atomic.AddUint64(&mmCreateTag.beforeCreateTagCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateTag.afterCreateTagCounter, 1)

	if mmCreateTag.inspectFuncCreateTag != nil {
		mmCreateTag.inspectFuncCreateTag(t1)
	}

	mm_params := &TagCreatorMockCreateTagParams{t1}

	// Record call args
	mmCreateTag.CreateTagMock.mutex.Lock()
	mmCreateTag.CreateTagMock.callArgs = append(mmCreateTag.CreateTagMock.callArgs, mm_params)
	mmCreateTag.CreateTagMock.mutex.Unlock()

	for _, e := range mmCreateTag.CreateTagMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateTag.CreateTagMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateTag.CreateTagMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateTag.CreateTagMock.defaultExpectation.params
		mm_got := TagCreatorMockCreateTagParams{t1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateTag.t.Errorf("TagCreatorMock.CreateTag got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateTag.CreateTagMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateTag.t.Fatal("No results are set for the TagCreatorMock.CreateTag")
		}
		return (*mm_results).err
	}
	if mmCreateTag.funcCreateTag != nil {
		return mmCreateTag.funcCreateTag(t1)
	}
	mmCreateTag.t.Fatalf("Unexpected call to TagCreatorMock.CreateTag. %v", t1)
	return
}

// CreateTagAfterCounter returns a count of finished TagCreatorMock.CreateTag invocations
func (mmCreateTag *TagCreatorMock) CreateTagAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTag.afterCreateTagCounter)
}

// CreateTagBeforeCounter returns a count of TagCreatorMock.CreateTag invocations
func (mmCreateTag *TagCreatorMock) CreateTagBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTag.beforeCreateTagCounter)
}

// Calls returns a list of arguments used in each call to TagCreatorMock.CreateTag.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateTag *mTagCreatorMockCreateTag) Calls() []*TagCreatorMockCreateTagParams {
	mmCreateTag.mutex.RLock()

	argCopy := make([]*TagCreatorMockCreateTagParams, len(mmCreateTag.callArgs))
	copy(argCopy, mmCreateTag.callArgs)

	mmCreateTag.mutex.RUnlock()

	return argCopy
}

// MinimockCreateTagDone returns true if the count of the CreateTag invocations corresponds
// the number of defined expectations
func (m *TagCreatorMock) MinimockCreateTagDone() bool {
	for _, e := range m.CreateTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateTagMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateTagCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateTag != nil && mm_atomic.LoadUint64(&m.afterCreateTagCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateTagInspect logs each unmet expectation
func (m *TagCreatorMock) MinimockCreateTagInspect() {
	for _, e := range m.CreateTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TagCreatorMock.CreateTag with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateTagMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateTagCounter) < 1 {
		if m.CreateTagMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TagCreatorMock.CreateTag")
		} else {
			m.t.Errorf("Expected call to TagCreatorMock.CreateTag with params: %#v", *m.CreateTagMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateTag != nil && mm_atomic.LoadUint64(&m.afterCreateTagCounter) < 1 {
		m.t.Error("Expected call to TagCreatorMock.CreateTag")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TagCreatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateTagInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TagCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TagCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateTagDone()
}
